"""
This Module contains logic to create and update the UI. Note that plugin usually provides an empty
UI.
The user will see UI elements generated by this plugin in the following cases:
* a new Version is available
* the API key is invalid
* any other basic Error messages

Parts of the code here are taken from https://github.com/CMDR-WDX/EDMC-Massacres/blob/master/classes/ui.py, mainly
the pattern around the UI class.
"""
import threading
import time

from classes.logger_factory import logger
from classes.version_check import open_download_page
from typing import Optional
import tkinter as tk
from theme import theme
from typing import Callable


def __get_column_span():
    return 1


def _display_outdated_version(frame: tk.Frame, row_counter: int) -> int:
    sub_frame = tk.Frame(frame)
    sub_frame.grid(row=row_counter, sticky=tk.EW)
    sub_frame.config(pady=10)
    tk.Label(sub_frame, text="PvpBot Plugin is Outdated").grid(row=0, column=0, columnspan=2)
    btn_github = tk.Button(sub_frame, text="Go to Download", command=open_download_page)
    btn_dismiss = tk.Button(sub_frame, text="Dismiss", command=ui.notify_version_button_dismiss_clicked)

    for i, item in enumerate([btn_github, btn_dismiss]):
        item.grid(row=1, column=i)
    theme.update(sub_frame)

    return row_counter+1


def _display_error_message(frame: tk.Frame, row_counter: int, message: str):
    tk.Label(frame, text=message, fg="yellow").grid(column=0, columnspan=__get_column_span(), row=row_counter)
    return row_counter+1


class _ResettableTimer:
    def __init__(self, callback: Callable, timer_secs=float(5)):
        self.__current_valid_thread = 0
        self.__callback = callback
        self.__thread : Optional[threading.Thread] = None
        self.__mutex = threading.Lock()
        self.__delay = timer_secs

    def __reset_timer(self):
        self.__current_valid_thread += 1
        # This "invalidates" the Thread as it will do a check if its own ID is still
        # the "active" one. If not, the thread is simply dropped

    def notify_about_new_event(self):
        self.__mutex.acquire()
        try:
            self.__reset_timer()

            thread_id = self.__current_valid_thread

            def thread_loop():
                time.sleep(self.__delay)
                self.__mutex.acquire()
                try:
                    if thread_id == self.__current_valid_thread:
                        if self.__callback is not None:
                            self.__callback()
                finally:
                    self.__mutex.release()

            self.__thread = threading.Thread(target=thread_loop, daemon=True, name=f"edmc-pvpbot-timer-{thread_id}")
            self.__thread.start()
        finally:
            self.__mutex.release()


class UI:
    def __init__(self):
        self.__parent = None
        self.__frame: Optional[tk.Frame] = None
        self.__display_outdated_version = False
        self.__warning_to_display: Optional[str] = None
        self.__error_message_reset_timer = _ResettableTimer(lambda: self.remove_warning(False))

    def update_ui(self):
        if self.__frame is None:
            logger.warning("UI Frame is not yet set up. The UI was not updated.")
            return
        logger.info("Updating UI...")
        # Remove all Children of Frame and rebuild
        for child in self.__frame.winfo_children():
            child.destroy()
        
        row_pointer = 0
        if self.__display_outdated_version:
            row_pointer = _display_outdated_version(self.__frame, row_pointer)
        if self.__warning_to_display is not None and len(self.__warning_to_display) > 0:
            row_pointer = _display_error_message(self.__frame, row_pointer, self.__warning_to_display)

        if len(self.__frame.winfo_children()) == 0:
            # Put in one Empty child to update size
            empty_child = tk.Frame(self.__frame)
            empty_child.pack()

        theme.update(self.__frame)
        logger.info("UI Update Complete")

    def __reset_timer(self):
        self.__error_message_reset_timer.notify_about_new_event()

    def set_frame(self, frame: tk.Frame):
        self.__parent = frame
        self.__frame = tk.Frame(frame)
        self.__frame.grid(column=0, columnspan=frame.grid_size()[1], sticky=tk.W)
        self.__frame.bind("<<Refresh>>", lambda _: self.update_ui())

    # is thread-safe
    def notify_about_new_warning(self, message: Optional[str], send_timer_event=True):
        self.__warning_to_display = message
        if send_timer_event:
            self.__reset_timer()
        self.__frame.event_generate("<<Refresh>>")

    def remove_warning(self, send_timer_event=True):
        self.notify_about_new_warning(None, send_timer_event=send_timer_event)

    # is thread-safe
    def notify_version_outdated(self):
        self.__display_outdated_version = True
        # Note that it is not allowed to update the UI from any Thread that is not main.
        # One has to use an Event instead. In the next UI cycle, tkinter will call self.update_ui() on the
        # main thread as it was bound to this event in the set_frame-Method.
        self.__frame.event_generate("<<Refresh>>")

    # call from Button
    def notify_version_button_dismiss_clicked(self):
        self.__display_outdated_version = False
        self.update_ui()


ui = UI()
